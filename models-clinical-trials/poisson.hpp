
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace poisson_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 33> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 20, column 2 to column 27)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 31, column 2 to column 29)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 32, column 2 to column 25)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 36, column 6 to column 17)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 37, column 6 to column 56)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 35, column 22 to line 38, column 3)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 35, column 4 to line 38, column 3)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 34, column 17 to line 39, column 3)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 34, column 2 to line 39, column 3)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 25, column 6 to column 47)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 26, column 6 to column 54)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 24, column 17 to line 27, column 3)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 24, column 2 to line 27, column 3)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 2, column 2 to column 17)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 3, column 2 to column 20)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 4, column 8 to column 9)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 4, column 2 to column 27)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 5, column 8 to column 9)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 5, column 10 to column 14)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 5, column 2 to column 31)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 9, column 25 to column 26)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 9, column 2 to column 29)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 10, column 23 to column 24)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 10, column 2 to column 27)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 11, column 2 to column 20)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 12, column 2 to column 21)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 14, column 4 to column 36)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 15, column 4 to column 41)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 13, column 15 to line 16, column 1)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 13, column 2 to line 16, column 1)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 20, column 24 to column 25)",
 " (in '/Users/skim/Desktop/Code/git/stan-models/poisson.stan', line 31, column 9 to column 19)"};



class poisson_model final : public model_base_crtp<poisson_model> {

 private:
  int J;
  int maxN;
  std::vector<int> N;
  std::vector<std::vector<int>> y;
  std::vector<int> eta_start;
  std::vector<int> eta_end;
  int log_lik_1dim__; 
  
 
 public:
  ~poisson_model() { }
  
  inline std::string model_name() const final { return "poisson_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  poisson_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "poisson_model_namespace::poisson_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 14;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 15;
      context__.validate_dims("data initialization","maxN","int",
           std::vector<size_t>{});
      maxN = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      maxN = context__.vals_i("maxN")[(1 - 1)];
      current_statement__ = 15;
      check_greater_or_equal(function__, "maxN", maxN, 1);
      current_statement__ = 16;
      validate_non_negative_index("N", "J", J);
      current_statement__ = 17;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{static_cast<size_t>(J)});
      N = std::vector<int>(J, std::numeric_limits<int>::min());
      
      current_statement__ = 17;
      N = context__.vals_i("N");
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 17;
        check_greater_or_equal(function__, "N[sym1__]", N[(sym1__ - 1)], 1);
      }
      current_statement__ = 18;
      validate_non_negative_index("y", "J", J);
      current_statement__ = 19;
      validate_non_negative_index("y", "maxN", maxN);
      current_statement__ = 20;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(J),
            static_cast<size_t>(maxN)});
      y = std::vector<std::vector<int>>(J, std::vector<int>(maxN, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 20;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= maxN; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 20;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 20;
        for (int sym2__ = 1; sym2__ <= maxN; ++sym2__) {
          current_statement__ = 20;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 21;
      validate_non_negative_index("eta_start", "J", J);
      current_statement__ = 22;
      eta_start = std::vector<int>(J, std::numeric_limits<int>::min());
      
      current_statement__ = 23;
      validate_non_negative_index("eta_end", "J", J);
      current_statement__ = 24;
      eta_end = std::vector<int>(J, std::numeric_limits<int>::min());
      
      current_statement__ = 25;
      assign(eta_start, 1, "assigning variable eta_start", index_uni(1));
      current_statement__ = 26;
      assign(eta_end, rvalue(N, "N", index_uni(1)),
        "assigning variable eta_end", index_uni(1));
      current_statement__ = 30;
      for (int j = 2; j <= J; ++j) {
        current_statement__ = 27;
        assign(eta_start,
          (rvalue(eta_end, "eta_end", index_uni((j - 1))) + 1),
          "assigning variable eta_start", index_uni(j));
        current_statement__ = 28;
        assign(eta_end,
          ((rvalue(eta_start, "eta_start", index_uni(j)) - 1) +
            rvalue(N, "N", index_uni(j))),
          "assigning variable eta_end", index_uni(j));
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 22;
        check_greater_or_equal(function__, "eta_start[sym1__]",
                               eta_start[(sym1__ - 1)], 1);
      }
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 24;
        check_greater_or_equal(function__, "eta_end[sym1__]",
                               eta_end[(sym1__ - 1)], 1);
      }
      current_statement__ = 31;
      validate_non_negative_index("lambda", "J", J);
      current_statement__ = 32;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 32;
      log_lik_1dim__ = rvalue(eta_end, "eta_end", index_uni(J));
      current_statement__ = 32;
      validate_non_negative_index("log_lik", "eta_end[J]", log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = J;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "poisson_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> lambda;
      lambda = std::vector<local_scalar_t__>(J, DUMMY_VAR__);
      
      current_statement__ = 1;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                 0., lp__, J);
      {
        current_statement__ = 13;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 10;
          lp_accum__.add(
            gamma_lpdf<false>(rvalue(lambda, "lambda", index_uni(j)), 2, 0.5));
          current_statement__ = 11;
          lp_accum__.add(
            poisson_lpmf<false>(
              rvalue(y, "y",
                index_uni(j), index_min_max(1, rvalue(N, "N", index_uni(j)))),
              rvalue(lambda, "lambda", index_uni(j))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "poisson_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> lambda;
      lambda = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 1;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                 0., lp__, J);
      out__.write(lambda);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(log_lik_1dim__);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      int count;
      count = std::numeric_limits<int>::min();
      
      current_statement__ = 3;
      count = 0;
      current_statement__ = 9;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 7;
        for (int n = 1; n <= rvalue(N, "N", index_uni(j)); ++n) {
          current_statement__ = 4;
          count = (count + 1);
          current_statement__ = 5;
          assign(log_lik,
            poisson_lpmf<false>(rvalue(y, "y", index_uni(j), index_uni(n)),
              rvalue(lambda, "lambda", index_uni(j))),
            "assigning variable log_lik", index_uni(count));
        }
      }
      current_statement__ = 3;
      check_greater_or_equal(function__, "count", count, 0);
      out__.write(log_lik);
      out__.write(count);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<local_scalar_t__> lambda;
      lambda = std::vector<local_scalar_t__>(J, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        lambda[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0., lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"lambda", "log_lik", "count"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(J)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "count");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "count");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"count\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"count\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = J;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (log_lik_1dim__ + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = J;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (log_lik_1dim__ + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 1> names__{"lambda"};
      const std::array<Eigen::Index, 1> constrain_param_sizes__{J};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = poisson_model_namespace::poisson_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return poisson_model_namespace::profiles__;
}

#endif


